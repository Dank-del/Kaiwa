import uuid

from django.contrib.auth.models import User
from django.db import models
from django.forms import ValidationError


def validate_room_name(value):
    """
    Validates that the room name contains no spaces or special characters.
    """
    if " " in value or not value.isalnum():
        raise ValidationError("Room name cannot contain spaces or special characters.")


class OnlineStatus(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    is_online = models.BooleanField(default=False)
    last_seen = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} is {'online' if self.is_online else 'offline'}"


class Room(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    name = models.CharField(max_length=255, unique=True, validators=[validate_room_name])
    title = models.CharField(max_length=255, default="")
    admins = models.ManyToManyField(
        User, through="RoomAdmin", related_name="admin_rooms"
    )
    users = models.ManyToManyField(User, through="RoomMembership")


class DirectMessage(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    sender = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="sent_messages"
    )
    receiver = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="received_messages"
    )
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=["sender", "receiver"], name="unique_dm_pair"
            )
        ]


class RoomAdmin(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    is_admin = models.BooleanField(default=False)


class RoomMembership(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    joined_at = models.DateTimeField(auto_now_add=True)


class InviteLink(models.Model):
    id = models.AutoField(primary_key=True)
    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='invite_links')
    link = models.UUIDField(unique=True, default=uuid.uuid4, editable=False)
    expires_at = models.DateTimeField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Invite link for {self.room.name} (Expires: {self.expires_at})"

    class Meta:
        ordering = ['-created_at']


class Message(models.Model):
    id = models.AutoField(primary_key=True)  # Autogenerated ID as primary key
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_deleted = models.BooleanField(default=False)
    deleted_at = models.DateTimeField(null=True, blank=True)
    deleted_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True, related_name="deleted_messages"
    )
